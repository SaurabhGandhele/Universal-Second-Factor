/**
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License, as published by the Free Software Foundation and
 *  available at http://www.fsf.org/licensing/licenses/lgpl.html,
 *  version 2.1 or above.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU Lesser General Public License for more details.
 *
 * Copyright (c) 2001-2015 StrongAuth, Inc.
 *
 * $Date: 2015-10-02 15:09:15 -0700 (Fri, 02 Oct 2015) $
 * $Revision: 86 $
 * $Author: jpadavala $
 * $URL: https://svn.strongauth.com/repos/jade/trunk/FIDOTutorial-Eclipse/FIDOTutorial/misc/fidotutorial-snippets.txt $
 *
 * *********************************************
 *                     888
 *                     888
 *                     888
 *   88888b.   .d88b.  888888  .d88b.  .d8888b
 *   888 "88b d88""88b 888    d8P  Y8b 88K
 *   888  888 888  888 888    88888888 "Y8888b.
 *   888  888 Y88..88P Y88b.  Y8b.          X88
 *   888  888  "Y88P"   "Y888  "Y8888   88888P'
 *
 * *********************************************
 *  
 * HOW TO BUILD AND USE THE prefido WEB-APPLICATION
 * ================================================
 *
 * REQUIREMENTS:
 * ============
 *
 *  - Oracle JDK 8 (latest update)
 *  - MySQL 5.5.30
 *  - Glassfish 4.1
 *  - Netbeans 8.0.2
 *  - Apache httpclient-4.5.1.jar and httpcore-4.4.3
 *  - Chrome browser version 45 or greater
 *  - Downloaded FIDOTutorial-Build-NNN.zip
 *  - Internet connectivity with access to https://fidodemo.strongauth.com 
 *      from your PC, or your own StrongKey CryptoEngine 2.x instance installed 
 *      on your network
 *  - FIDO CertifiedTM or FIDO ReadyTM U2F Authenticator
 *
 * INSTRUCTIONS:
 * ============
 *
 *  1. Modify your /etc/hosts or C:\Windows\System32\drivers\etc\hosts file to 
 *      include the fidotutorial.strongauth.com as an alias for localhost.  
 *      If you plan to test the FIDOTutorial web-application from a different 
 *      client-computer while running the web-application on your PC, then find 
 *      the IP address of your PC (where the web-application will run) and add 
 *      the fidotutorial.strongauth.com alias to your PC's IP address;
 *
 *  2. Verify you can ping fidotutorial.strongauth.com.  If you have a firewall 
 *      on the PC that will run the web-application, add a rule to open port 
 *      48181 – the port where Glassfish should be listening for application 
 *      requests over HTTPS.  If you choose to configure TLS-use on a different 
 *      port, ensure that port is accessible over the network;
 *
 *  3. Download the JDK, Glassfish, MySQL, Netbeans, Apache HTTP jar files and 
 *      the FIDOTutorial zip file, as necessary;
 *
 *  4. Install the JDK, MySQL, Glassfish and Netbeans;
 *
 *  5. Unzip the FIDOTutorial zip file in a working directory of your choice;
 *
 *  6. Using the mysql command-line client, create a "customerdb" database and 
 *      a user ("custdbuser") to access this database;
 *
 *  7. Using the mysql command-line, login as custdbuser into the customerdb 
 *      database and import the fidotutorial-schema.sql (using "source 
 *      FIDOTutorial/misc/fidotutorial-schema.sql") contents into the database;
 *
 *  8. Using the Admin Console for Glassfish (localhost:4848, username: admin, 
 *      password: adminadmin), create a JDBC Connection Pool – named 
 *      "CustomerDBPool" - to access the customerdb database using the 
 *      username/password you created;
 *
 *  9. Create a JDBC Resource name of "jdbc/customerdb" to use the new connection 
 *      pool;
 *
 *  10. If you do not have an HTTP Listener using TLS, add one to listen on 
 *      port 48181.  The listener service configuration is under the 
 *      Configurations->server-config->HTTP Service->HTTP Listeners section of 
 *      the Glassfish Admin Console;
 *
 *  11. In NetBeans, open the FIDOTutorial project from the working directory;
 *
 *  12. Add the Apache HTTP jar files as dependencies to the prefido 
 *      web-application project;
 *
 *  13. Clean and build the FIDOTutorial project;
 *
 *  14. Deploy the project to Glassfish and monitor the logs (using tail -f 
 *      server.log file in the 
 *      GLASSFISH_HOME/glassfish4/glassfish/domains/domain1/logs directory to 
 *      see that these 2 lines show up:
 *
 *      Info:   Loading application [FIDOTutorial#prefido.war] at [prefido]
 *      Info:   FIDOTutorial was successfully deployed in 1,622 milliseconds.
 *
 *  15. Using Chrome, navigate to https://fidotutorial.strongauth.com:48181/prefido;
 *
 *  16. Add a new User account on the home page of the application; 
 *
 *  17. Login with the new credential; you should be able to see two Customer 
 *      records on the web-application panel;
 *
 *  18. Verify you can add a new customer and update and existing customer;
 *
 * This concludes the first part of the tutorial – getting your environment 
 * ready for the FIDO-enablement of this simple web-application.
 *
 *
 * HOW TO FIDO-ENABLE THE prefido WEB-APPLICATION
 * ==============================================
 *
 * The second part of the tutorial covers how to modify the prefido 
 * web-application to use FIDO U2F Authenticators for strong-authentication 
 * to the application.
 *
 * INSTRUCTIONS: 
 *
 *  1. In Netbeans, copy the prefido project and give it the name "postfido";
 * 
 *  2. Change the name of the com.strongauth.fidotutorial.prefido package to 
 *      com.strongauth.fidotutorial.postfido;
 *
 *  3. Change the <title> tag's value from "Home | StrongKey CryptoEngine 
 *      PRE-FIDO Tutorial" to "Home | StrongKey CryptoEngine POST-FIDO Tutorial"
 *      in FIDOTutorial/postfido/web/index.jsp;
 *
 *  4. Change the page heading banner in the <h1> tag from "StrongKey 
 *      CryptoEngine PRE-FIDO Tutorial" to "StrongKey CryptoEngine POST-FIDO 
 *      Tutorial" in FIDOTutorial/postfido/web/index.jsp;
 *
 *  5. Create the FIDOTutorial/postfido/web/js directory;
 *
 *  6. From the FIDOTutorial/misc folder, copy the following files:
 *
 *      a) Copy fidoregister.jsp and fidoauthenticate.jsp to FIDOTutorial/postfido/web;
 *      b) Copy common.js, enrolldata.js, FIDOAJAXMethods.js, jquery-2.0.0.min.js 
 *          and u2f-api.js to FIDOTutorial/postfido/web/js;
 *      c) Copy loading.gif to FIDOTutorial/postfido/web/img;
 *      d) Copy FIDOAJAXServlet.java and SKFERestClient.java to 
 *          FIDOTutorial/postfido/src/java/com/strongauth/fidotutorial/postfido;
 *
 *  7. Follow the instructions provided in this file, and replace sections of 
 *      code in the postfido project;
 *
 *  8. Clean and build the postfido project;
 *
 *  9. Add the postfido project to the FIDOTutorial enterprise project as a module;
 *
 *  10. Rebuild the FIDOTutorial project;
 *
 *  11. Deploy it to Glassfish;
 *
 *  12. Using Chrome, navigate to https://fidotutorial.strongauth.com:48181/postfido;
 *
 *  13. Insert your FIDO U2F Token in the USB port and wait for the driver 
 *      to be installed (on Windows);
 *
 *  14. Add a new User account on the home page of the application and follow 
 *      the on-screen prompts as you go through a FIDO key-registration;
 *
 *  15. Logout of the application and login with the newly created account; 
 *      ensure you are prompted for your FIDO Token to authenticate to the 
 *      web-application;
 *
 *  16. Verify you can add a new customer and update and existing customer;
 *
 * This concludes the second part of the tutorial.  You have now FIDO-enabled 
 * a web-application.  Congratulations!!
 *  
 */

/*******************
 
         d888
        d8888
          888
          888
          888
          888
          888
        8888888

********************/

(1) Add the following section to
    FIDOTutorial/ejbmodule/src/java/com/strongauth/fidotutorial/utilities/Constants.java

    /*AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA*/
    // Webservice-related constants
    public static final String JSON_KEY_SERVLET_INPUT_USERNAME = "username";
    public static final String JSON_KEY_SERVLET_INPUT_REQUEST = "request";
    public static final String JSON_KEY_SERVLET_INPUT_RESPONSE = "response";
    public static final String JSON_KEY_SERVLET_INPUT_METADATA = "metadata";
    public static final String PRE_REGISTER_ENDPOINT = "preregister";
    public static final String REGISTER_ENDPOINT = "register";
    public static final String PRE_AUTHENTICATE_ENDPOINT = "preauthenticate";
    public static final String AUTHENTICATE_ENDPOINT = "authenticate";
    public static final String GETKEYSINFO_ENDPOINT = "getkeysinfo";
    public static final String DEACTIVATE_ENDPOINT = "deactivate";
    public static final String ACTIVATE_ENDPOINT = "activate";
    public static final String DEREGISTER_ENDPOINT = "deregister";
    public static final String REST_SERVER_ERROR = "serverErr";
    public static final String REST_SERVICE_ERROR = "serviceErr";
    public static final int TIMEOUT_VALUE = 30000;
    
    /**
     * POSTFIDO Servlet Calls
     */
    public static final String FIDOREGISTER = "fidoregister";
    public static final String FIDOAUTHENTICATE = "fidoauthenticate";
    
    public static final String PREREGISTER = "preregister";
    public static final String REGISTER = "register";
    public static final String PREAUTHENTICATE = "preauthenticate";
    public static final String AUTHENTICATE = "authenticate";
    /*AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA*/


/*******************
 
         .d8888b.
        d88P  Y88b
               888
             .d88P
         .od888P"
        d88P"
        888"
        888888888

********************/

(2). Source code changes to Common.java located in ejbmodule project under 
     src/java/com/strongauth/fidotutorial/utilities/Common.java

    /*BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB*/
    // Constants to call the machine hosting the SKCE
    public static final String SKCE_HOST_URL = "https://fidodemo.strongauth.com";
    public static final String SKFE_REST_SUFFIX = "/skfe/restfido/";
    public static final String U2F_VERSION = "U2F_V2";    
    public static final String SKFE_REST_URI = SKCE_HOST_URL + SKFE_REST_SUFFIX;
    /*BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB*/


/*******************
 
         .d8888b. 
        d88P  Y88b
             .d88P
            8888" 
             "Y8b.
        888    888
        Y88b  d88P
         "Y8888P"

********************/


(3) Add the following line of code to FIDOTutorial/postfido//web/index.jsp
    Please note that there is a concatenation vertical bar at the end of the
    line of code; it is important that it remain there.

                    <!--CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC-->
                    
                    <!--Add a link to fidoregister.jsp here; this allows users to 
                        register additional FIDO tokens. Please note that there is 
                        a concatenation vertial bar at the end of the line of code; 
                        it is important that it remain there.
                    -->
                    <!-- <a href="fidoregister.jsp">Register another FIDO U2F Token </a> | -->
                    <!--CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC-->


/*******************
 
            d8888  
           d8P888  
          d8P 888  
         d8P  888  
        d88   888  
        8888888888 
              888  
              888  

********************/


(4). Copy this snippet of code into
     FIDOTutorial/postfido/src/java/com/strongauth/fidotutorial/postfido/JSPServlet.java
     You will need to import missing classes into the servlet for the new
     classes defined here.

    /* DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD */
    
    // Instantiate SKCE REST client
    SKFERestClient skceclient = new SKFERestClient();

    /* DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD */


/*******************
 
        888888888  
        888        
        888        
        8888888b.  
             "Y88b 
               888 
        Y88b  d88P 
         "Y8888P"  

********************/


(5) Copy this snippet of code into
    FIDOTutorial/postfido/src/java/com/strongauth/fidotutorial/postfido/JSPServlet.java
    You will subsequently need to add missing constants into the Constants.java 
    file in the FIDOTutorial/ejbmodule/src/java/com/strongauth/fidotutorial/utilities
    folder - they are defined in the FFFFF.... step below.

            /* EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE */
            case "/" + Constants.FIDOAUTHENTICATE:
                    createRequestDispatcher(request, response, "/" + Constants.FIDOAUTHENTICATE + ".jsp");
                    break;
            case "/" + Constants.FIDOREGISTER:
                    createRequestDispatcher(request, response, "/" + Constants.FIDOREGISTER + ".jsp");
                    break;
            /* EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE */


/*******************
 
         .d8888b.  
        d88P  Y88b 
        888        
        888d888b.  
        888P "Y88b 
        888    888 
        Y88b  d88P 
         "Y8888P"  

********************/


(6) Copy this snippet of code into
    FIDOTutorial/postfido/src/java/com/strongauth/fidotutorial/postfido/JSPServlet.java

            /* FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF */
            case "/" + Constants.PREAUTHENTICATE:
                    String preauthuname = request.getParameter("Adata");
                    Common.log(Level.INFO, "FIDOTUT-MSG-1000", "preauthenticate() parameter: " + preauthuname);
                    
                    // Request to the FIDO preauthenticate webservice
                    JsonObject skceresponse = null;
                    try {
                        skceresponse = skceclient.preauthenticate(Common.stringToJSON(preauthuname).getString("username"));
                    } catch (URISyntaxException ex) {
                        Common.log(Level.WARNING, "FIDOTUT-ERR-1001", ex.getLocalizedMessage());
                    }
                    
                    response.setContentType("application/json");
                    try (PrintWriter pw = response.getWriter()) {
                        pw.println(skceresponse);
                    }
                    break;            
            /* FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF */


/*******************
 
         8888888888 
              d88P 
             d88P  
            d88P   
         88888888  
          d88P     
         d88P      
        d88P      

********************/


(7)  Just change the Constants.INDEX to Constants.FIDOREGISTER in
     FIDOTutorial/postfido/src/java/com/strongauth/fidotutorial/postfido/JSPServlet.java

                                /* GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG */
                                /**
                                 * In the statement below, change Constants.INDEX to 
                                 * Constants.FIDOREGISTER. This redirects the user to the 
                                 * fidoregister.jsp page so they may register a FIDO U2F 
                                 * Authenticator upon adding a new user.
                                 */
                                this.request = Constants.FIDOREGISTER;
                                /* GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG */


/*******************
 
         .d8888b.  
        d88P  Y88b 
        Y88b. d88P 
         "Y88888"  
        .d8P""Y8b. 
        888    888 
        Y88b  d88P 
         "Y8888P"   

********************/


(8)  Just change the Constants.INDEX to Constants.FIDOAUTHENTICATE in
     FIDOTutorial/postfido/src/java/com/strongauth/fidotutorial/postfido/JSPServlet.java

                        /* HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH */
                        /**
                         * In the statement below, change Constants.INDEX to 
                         * Constants.FIDOAUTHENTICATE.  This redirects the user 
                         * to the fidoauthenticate.jsp page after 1st factor 
                         * authentication is successful to perform FIDO U2F
                         * authentication.
                         */
                        this.request = Constants.FIDOAUTHENTICATE;
                        /* HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH */


/*******************
 
         .d8888b.  
        d88P  Y88b 
        888    888 
        Y88b. d888 
         "Y888P888 
               888 
        Y88b  d88P 
         "Y8888P"  

********************/


(9) Copy this snippet of code (between the IIIII... lines) into
    FIDOTutorial/postfido/web/WEB-INF/web.xml

    <!--!--IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII---->
    <!-- Add FIDO-enabled servlet -->
    <servlet>
        <servlet-name>FIDOAJAXServlet</servlet-name>
        <servlet-class>com.strongauth.fidotutorial.postfido.FIDOAJAXServlet</servlet-class>
    </servlet>    
    
    <!-- Add FIDO-enabled servlet mappings here; the only mapping that stays
         in JSPServlet is the /preauthenticate since it will check to see if
         a user need to authenticate with a FIDO U2F token upon username/
         password-based login.  All remaining mappings belong to 
         FIDOAJAXServlet.  -->
    <servlet-mapping>
        <servlet-name>JSPServlet</servlet-name>
        <url-pattern>/preauthenticate</url-pattern>
    </servlet-mapping>
    
    <servlet-mapping>
        <servlet-name>FIDOAJAXServlet</servlet-name>
        <url-pattern>/authenticate</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>FIDOAJAXServlet</servlet-name>
        <url-pattern>/preregister</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>FIDOAJAXServlet</servlet-name>
        <url-pattern>/register</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>JSPServlet</servlet-name>
        <url-pattern>/fidoregister</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>JSPServlet</servlet-name>
        <url-pattern>/fidoauthenticate</url-pattern>
    </servlet-mapping>
    <!--End of FIDO-Enabled servlet and servlet-mappings-->
<!--!--IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII---->
